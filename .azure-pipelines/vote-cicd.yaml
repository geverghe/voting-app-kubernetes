# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - master
    - refs/pull/*
  paths:
    include:
    - vote/*
    - .azure-pipelines/vote-cicd.yaml
    - manifests/vote.yaml

resources:
  repositories:
  - repository: self
  - repository: templates
    type: github
    name: N-Usha/voting-app-ci-templates
    endpoint: github.com_N-Usha

variables:
- group: VoterAppSecrets  
  # Container registry service connection established during pipeline creation
- name: dockerRegistryServiceConnection 
  value: '621a834f-49c3-4f4e-a151-fa59b0924954'
- name: imageRepository 
  value: 'geverghevotingappkubernetes'
- name: containerRegistry 
  value: 'forresterdemo.azurecr.io'
- name: dockerfilePath 
  value: 'vote/Dockerfile'
- name: tag 
  value: '$(Build.BuildId)'
- name: imagePullSecret 
  value: 'forresterdemosecret'
- name: azure-storage-secret 
  value: 'azure-storage'
- name: k8sNamespaceForPR 
  value: '$(system.pullRequest.sourceBranch)'

  # Agent VM image name
- name: vmImageName 
  value: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: vote/helm
      artifact: vote/helm

  - job: Test
    dependsOn: Build
    displayName: Run tests
    variables: { agent.disablelogplugin.TestResultLogPlugin: 'false' }
    pool:
      vmImage: $(vmImageName)
    steps:  
    - task: ContainerStructureTest@0
      displayName: 'Container Structure Test '
      inputs:
        dockerRegistryServiceConnection: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        tag: '$(tag)'
        configFile: tests/FileExistenceTest.yml
        testRunTitle: 'File Existence test'
        failTaskOnFailedTests: false


- stage: ReviewApp
  displayName: Deploy Pull Request
  dependsOn: Build
  jobs:
  - deployment: DeployPullRequest
    displayName: Deploy Pull request
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
    pool:
      vmImage: $(vmImageName)      
    environment: 'Development.$(k8sNamespaceForPR)' 
    strategy:
      runOnce:
        deploy:
          steps:
          - reviewApp: contoso-dev-aks

          - task: Kubernetes@1
            displayName: 'Create a new namespace for the pull request'
            inputs:
              command: apply
              useConfigurationFile: true
              inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              namespace: '$(k8sNamespaceForPR)'
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Create storage secret
            inputs: 
              action: createSecret
              secretType: generic
              secretName: $(azure-storage-secret)
              secretArguments: --from-literal=account-name=$(azure-storage-username) --from-literal=access-key=$(azure-storage-key)
              kubernetesServiceConnection: 'Development-contoso-dev-aks-1582199981119'
              namespace: '$(k8sNamespaceForPR)'

          - task: KubernetesManifest@0
            name: bake
            displayName: Bake K8s manifests from Helm chart
            inputs:
              action: bake
              renderType: helm2
              helmChart: $(Pipeline.Workspace)/vote/helm
          
          - task: KubernetesManifest@0
            displayName: Deploy to the new namespace in the Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespaceForPR)
              manifests: $(bake.manifestsBundle)
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

- stage: DeployToQA
  displayName: Deploy to QA
  dependsOn: Build
  condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'QA.contoso-qa-aks'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              namespace: "contoso-qa-aks"
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Create storage secret
            inputs: 
              action: createSecret
              secretType: generic
              secretName: $(azure-storage-secret)
              secretArguments: --from-literal=account-name=$(azure-storage-username) --from-literal=access-key=$(azure-storage-key)
              kubernetesServiceConnection: 'QA-contoso-qa-aks-1582275708164'
              namespace: "contoso-qa-aks"

          - task: KubernetesManifest@0
            name: bake
            displayName: Bake K8s manifests from Helm chart
            inputs:
              action: bake
              renderType: helm2
              helmChart: $(Pipeline.Workspace)/vote/helm

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: "contoso-qa-aks"
              manifests: $(bake.manifestsBundle)
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

- stage: DeploymentStrategy
  displayName: DeploymentStrategy
  dependsOn: DeployToQA

  jobs:
  - deployment: DeploymentStrategy    
    displayName: Deploy Job Canary
    environment: Production.default   
    pool:
      vmImage: $(vmImageName)    
    strategy:
      canary:  
        increments: [50]     
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              namespace: 'default'
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Create storage secret
            inputs: 
              action: createSecret
              secretType: generic
              secretName: $(azure-storage-secret)
              secretArguments: --from-literal=account-name=$(azure-storage-username) --from-literal=access-key=$(azure-storage-key)
              kubernetesServiceConnection: 'Development-contoso-dev-aks-1582199981119'
              namespace: 'default'

          - task: KubernetesManifest@0
            name: bake
            displayName: Bake K8s manifests from Helm chart
            inputs:
              action: bake
              renderType: helm2
              helmChart: $(Pipeline.Workspace)/vote/helm
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:              
              manifests: $(bake.manifestsBundle)
              namespace: 'default'                        
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
        on: 
          failure: 
            steps: 
            - script: echo clean-up, rollback...   
          success: 
            steps: 
            - script: echo checks passed, notify... 
        
          
